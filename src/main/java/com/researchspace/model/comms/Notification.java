package com.researchspace.model.comms;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Lob;
import javax.persistence.Transient;

import org.apache.commons.lang.StringUtils;

import com.researchspace.model.comms.data.NotificationData;

/**
 * A simple one-way message, usually will be generated by the system.
 */
@Entity
public class Notification extends Communication implements Serializable {

	public static final int MAX_MESSAGE_LENGTH = 2000;

	private static final long serialVersionUID = 8300022086445850773L;

	private NotificationType notificationType;
	private String notificationMessage;
	private String notificationData;

	public NotificationType getNotificationType() {
		return notificationType;
	}

	public void setNotificationType(NotificationType notificationType) {
		this.notificationType = notificationType;
	}

	/**
	 * Ssytem-generated message describing the notification for human readers.
	 * 
	 * @return
	 */
	@Column(length = 2000)
	public String getNotificationMessage() {
		return notificationMessage;
	}

	/**
	 * Sets max message, max length = 2000 characters; longer messages will be
	 * truncated.
	 * 
	 * @param notificationMessage
	 */
	public void setNotificationMessage(String notificationMessage) {
		this.notificationMessage = StringUtils.abbreviate(notificationMessage, MAX_MESSAGE_LENGTH);
	}

	@Lob
	public String getNotificationData() {
		return this.notificationData;
	}

	public void setNotificationData(String jsonData) {
		this.notificationData = jsonData;
	}

	@Transient
	public NotificationData getNotificationDataObject() {
		return NotificationData.createFromJson(this.notificationType, this.notificationData);
	}

	public void setNotificationDataObject(NotificationData notificationData) {
		this.notificationData = (notificationData == null) ? null : notificationData.toJson();
	}

	@Transient
	public boolean isNotification() {
		return true;
	}
	
	/**
	 * Whether the document should be linked to in messages derived from this notification. For example
	 *  if notification is about a document that is deleted or unshared then providing a link that won't resolve
	 *  is to be avoided.
	 * @return <code>true</code>  if document should not be linked to, <code>false</code> otherwise.
	 */
	@Transient
	public boolean isIgnoreRecordLinkInMessage (){
		return NotificationType.NOTIFICATION_DOCUMENT_DELETED.equals(notificationType) ||
				NotificationType.NOTIFICATION_DOCUMENT_UNSHARED.equals(notificationType);
	}

}
